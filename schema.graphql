# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface Node {
    id: ID!
}

type Assignment {
    createdAt: Time!
    description: String
    dueDate: Time!
    duration: Duration
    file: String
    id: ID!
    isExam: Boolean!
    name: String!
    updatedAt: Time!
}

type AssignmentConnection {
    edges: [AssignmentEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type AssignmentEdge {
    cursor: Cursor!
    node: Assignment
}

type AuthData {
    accessToken: String!
    refreshToken: String!
}

type Class {
    active: Boolean!
    createdAt: Time!
    id: ID!
    name: String!
    updatedAt: Time!
}

type ClassConnection {
    edges: [ClassEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ClassEdge {
    cursor: Cursor!
    node: Class
}

type Group {
    active: Boolean!
    createdAt: Time!
    groupType: GroupType!
    id: ID!
    name: String!
    updatedAt: Time!
}

type GroupConnection {
    edges: [GroupEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type GroupEdge {
    cursor: Cursor!
    node: Group
}

type Message {
    attachment: String!
    content: String!
    createdAt: Time!
    id: ID!
    updatedAt: Time!
}

type MessageConnection {
    edges: [MessageEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type MessageEdge {
    cursor: Cursor!
    node: Message
}

type Mutation {
    addAssignment(input: AddAssignmentInput!): Assignment
    addClass(input: AddClassInput!): Class
    addGroup(input: AddGroupInput!): Group
    addSchool(input: AddSchoolInput!): School
    addStage(input: AddStageInput!): Stage
    addUser(input: AddUserInput!): User
    deleteAssignment(id: ID!): Boolean!
    deleteClass(id: ID!): Boolean!
    deleteGroup(id: ID!): Boolean!
    deleteSchool(id: ID!): Boolean!
    deleteSchoolPermanently(id: ID!): Boolean!
    deleteStage(id: ID!): Boolean!
    deleteStagePermanently(id: ID!): Boolean!
    deleteUser(id: ID!): Boolean!
    deleteUserPermanently(id: ID!): Boolean!
    loginAdmin(input: LoginInput!): AuthData
    loginUser(input: LoginInput!): AuthData
    postMessage(input: PostMessageInput!): Message
    refreshTokens(token: String!): AuthData
    updateAssignment(id: ID!, input: UpdateAssignmentInput!): Assignment
    updateClass(id: ID!, input: UpdateClassInput!): Class
    updateGroup(id: ID!, input: UpdateGroupInput!): Group
    updateSchool(id: ID!, input: UpdateSchoolInput!): School
    updateStage(id: ID!, input: UpdateStageInput!): Stage
    updateUser(id: ID!, input: UpdateUserInput!): User
}

type PageInfo {
    endCursor: Cursor
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: Cursor
}

type Query {
    assignment(id: ID!): Assignment
    assignments(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: AssignmentOrder, schoolID: ID, stageID: ID, userID: ID, where: AssignmentWhereInput): AssignmentConnection
    class(id: ID!): Class
    classes(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: ClassOrder, schoolID: ID, stageID: ID, userID: ID, where: ClassWhereInput): ClassConnection
    group(id: ID!): Group
    groups(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: GroupOrder, userID: ID, where: GroupWhereInput): GroupConnection
    messages(after: Cursor, before: Cursor, first: Int, groupID: ID!, last: Int, orderBy: MessageOrder, where: MessageWhereInput): MessageConnection
    school(id: ID!): School
    schools(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: SchoolOrder, where: SchoolWhereInput): SchoolConnection
    stage(id: ID!): Stage
    stages(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: StageOrder, where: StageWhereInput): StageConnection
    user(id: ID!): User
    users(after: Cursor, before: Cursor, first: Int, last: Int, orderBy: UserOrder, where: UserWhereInput): UserConnection
}

type School implements Node {
    active: Boolean!
    createdAt: Time!
    id: ID!
    image: String
    name: String!
    updatedAt: Time!
}

type SchoolConnection {
    edges: [SchoolEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type SchoolEdge {
    cursor: Cursor!
    node: School
}

type Stage implements Node {
    active: Boolean!
    createdAt: Time!
    id: ID!
    name: String!
    school: School!
    tuitionAmount: Int!
    updatedAt: Time!
}

type StageConnection {
    edges: [StageEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type StageEdge {
    cursor: Cursor!
    node: Stage
}

type Subscription {
    messagePosted(groupID: ID!): Message!
}

type User implements Node {
    active: Boolean!
    createdAt: Time!
    id: ID!
    image: String!
    name: String!
    phone: String!
    role: Role!
    school: School
    stage: Stage
    updatedAt: Time!
    username: String!
}

type UserConnection {
    edges: [UserEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserEdge {
    cursor: Cursor!
    node: User
}

enum AssignmentOrderField {
    CREATED_AT
    DESCRIPTION
    DUE_DATE
    DURATION
    NAME
    UPDATED_AT
}

enum ClassOrderField {
    CREATED_AT
    NAME
    UPDATED_AT
}

enum GroupOrderField {
    CREATED_AT
    NAME
    UPDATED_AT
}

enum GroupType {
    PRIVATE
    SHARED
}

enum MessageOrderField {
    CREATED_AT
    UPDATED_AT
}

enum OrderDirection {
    ASC
    DESC
}

enum Role {
    SCHOOL_ADMIN
    STUDENT
    SUPER_ADMIN
    TEACHER
}

enum SchoolOrderField {
    CREATED_AT
    NAME
    UPDATED_AT
}

enum StageOrderField {
    CREATED_AT
    NAME
    UPDATED_AT
}

enum State {
    ABSENT
    EXCUSED_ABSENT
    PRESENT
    SICK
}

enum UserOrderField {
    CREATED_AT
    NAME
    PHONE
    ROLE
    UPDATED_AT
    USERNAME
}

input AddAssignmentInput {
    classID: ID!
    description: String
    dueDate: Time!
    duration: Duration
    file: Upload
    isExam: Boolean! = false
    name: String!
}

input AddClassInput {
    active: Boolean! = true
    name: String!
    stageID: ID!
    teacherID: ID!
}

input AddGroupInput {
    active: Boolean! = true
    name: String!
    userID: ID!
}

input AddSchoolInput {
    active: Boolean! = true
    image: Upload!
    name: String!
}

input AddStageInput {
    active: Boolean! = true
    name: String!
    schoolID: ID!
    tuitionAmount: Int!
}

input AddUserInput {
    active: Boolean! = true
    image: Upload
    name: String!
    password: String!
    phone: String!
    role: Role! = STUDENT
    schoolID: ID
    stageID: ID
    username: String!
}

input AssignmentOrder {
    direction: OrderDirection!
    field: AssignmentOrderField
}

"""

AssignmentSubmissionWhereInput is used for filtering AssignmentSubmission objects.
Input was generated by ent.
"""
input AssignmentSubmissionWhereInput {
    and: [AssignmentSubmissionWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "assignment edge predicates"
    hasAssignment: Boolean
    hasAssignmentWith: [AssignmentWhereInput!]
    "student edge predicates"
    hasStudent: Boolean
    hasStudentWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    not: AssignmentSubmissionWhereInput
    or: [AssignmentSubmissionWhereInput!]
    "submitted_at field predicates"
    submittedAt: Time
    submittedAtGT: Time
    submittedAtGTE: Time
    submittedAtIn: [Time!]
    submittedAtIsNil: Boolean
    submittedAtLT: Time
    submittedAtLTE: Time
    submittedAtNEQ: Time
    submittedAtNotIn: [Time!]
    submittedAtNotNil: Boolean
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

"""

AssignmentWhereInput is used for filtering Assignment objects.
Input was generated by ent.
"""
input AssignmentWhereInput {
    and: [AssignmentWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "deleted_at field predicates"
    deletedAt: Time
    deletedAtGT: Time
    deletedAtGTE: Time
    deletedAtIn: [Time!]
    deletedAtIsNil: Boolean
    deletedAtLT: Time
    deletedAtLTE: Time
    deletedAtNEQ: Time
    deletedAtNotIn: [Time!]
    deletedAtNotNil: Boolean
    "description field predicates"
    description: String
    descriptionContains: String
    descriptionContainsFold: String
    descriptionEqualFold: String
    descriptionGT: String
    descriptionGTE: String
    descriptionHasPrefix: String
    descriptionHasSuffix: String
    descriptionIn: [String!]
    descriptionIsNil: Boolean
    descriptionLT: String
    descriptionLTE: String
    descriptionNEQ: String
    descriptionNotIn: [String!]
    descriptionNotNil: Boolean
    "due_date field predicates"
    dueDate: Time
    dueDateGT: Time
    dueDateGTE: Time
    dueDateIn: [Time!]
    dueDateLT: Time
    dueDateLTE: Time
    dueDateNEQ: Time
    dueDateNotIn: [Time!]
    "duration field predicates"
    duration: Duration
    durationGT: Duration
    durationGTE: Duration
    durationIn: [Duration!]
    durationIsNil: Boolean
    durationLT: Duration
    durationLTE: Duration
    durationNEQ: Duration
    durationNotIn: [Duration!]
    durationNotNil: Boolean
    "file field predicates"
    file: String
    fileContains: String
    fileContainsFold: String
    fileEqualFold: String
    fileGT: String
    fileGTE: String
    fileHasPrefix: String
    fileHasSuffix: String
    fileIn: [String!]
    fileIsNil: Boolean
    fileLT: String
    fileLTE: String
    fileNEQ: String
    fileNotIn: [String!]
    fileNotNil: Boolean
    "class edge predicates"
    hasClass: Boolean
    hasClassWith: [ClassWhereInput!]
    "grades edge predicates"
    hasGrades: Boolean
    hasGradesWith: [GradeWhereInput!]
    "submissions edge predicates"
    hasSubmissions: Boolean
    hasSubmissionsWith: [AssignmentSubmissionWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    "is_exam field predicates"
    isExam: Boolean
    isExamNEQ: Boolean
    "name field predicates"
    name: String
    nameContains: String
    nameContainsFold: String
    nameEqualFold: String
    nameGT: String
    nameGTE: String
    nameHasPrefix: String
    nameHasSuffix: String
    nameIn: [String!]
    nameLT: String
    nameLTE: String
    nameNEQ: String
    nameNotIn: [String!]
    not: AssignmentWhereInput
    or: [AssignmentWhereInput!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

"""

AttendanceWhereInput is used for filtering Attendance objects.
Input was generated by ent.
"""
input AttendanceWhereInput {
    and: [AttendanceWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "date field predicates"
    date: Time
    dateGT: Time
    dateGTE: Time
    dateIn: [Time!]
    dateLT: Time
    dateLTE: Time
    dateNEQ: Time
    dateNotIn: [Time!]
    "class edge predicates"
    hasClass: Boolean
    hasClassWith: [ClassWhereInput!]
    "student edge predicates"
    hasStudent: Boolean
    hasStudentWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    not: AttendanceWhereInput
    or: [AttendanceWhereInput!]
    "state field predicates"
    state: State
    stateIn: [State!]
    stateNEQ: State
    stateNotIn: [State!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

input ClassOrder {
    direction: OrderDirection!
    field: ClassOrderField
}

"""

ClassWhereInput is used for filtering Class objects.
Input was generated by ent.
"""
input ClassWhereInput {
    "active field predicates"
    active: Boolean
    activeNEQ: Boolean
    and: [ClassWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "deleted_at field predicates"
    deletedAt: Time
    deletedAtGT: Time
    deletedAtGTE: Time
    deletedAtIn: [Time!]
    deletedAtIsNil: Boolean
    deletedAtLT: Time
    deletedAtLTE: Time
    deletedAtNEQ: Time
    deletedAtNotIn: [Time!]
    deletedAtNotNil: Boolean
    "assignments edge predicates"
    hasAssignments: Boolean
    hasAssignmentsWith: [AssignmentWhereInput!]
    "attendances edge predicates"
    hasAttendances: Boolean
    hasAttendancesWith: [AttendanceWhereInput!]
    "group edge predicates"
    hasGroup: Boolean
    hasGroupWith: [GroupWhereInput!]
    "schedules edge predicates"
    hasSchedules: Boolean
    hasSchedulesWith: [ScheduleWhereInput!]
    "stage edge predicates"
    hasStage: Boolean
    hasStageWith: [StageWhereInput!]
    "teacher edge predicates"
    hasTeacher: Boolean
    hasTeacherWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    "name field predicates"
    name: String
    nameContains: String
    nameContainsFold: String
    nameEqualFold: String
    nameGT: String
    nameGTE: String
    nameHasPrefix: String
    nameHasSuffix: String
    nameIn: [String!]
    nameLT: String
    nameLTE: String
    nameNEQ: String
    nameNotIn: [String!]
    not: ClassWhereInput
    or: [ClassWhereInput!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

"""

GradeWhereInput is used for filtering Grade objects.
Input was generated by ent.
"""
input GradeWhereInput {
    and: [GradeWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "exam_grade field predicates"
    examGrade: Int
    examGradeGT: Int
    examGradeGTE: Int
    examGradeIn: [Int!]
    examGradeLT: Int
    examGradeLTE: Int
    examGradeNEQ: Int
    examGradeNotIn: [Int!]
    "exam edge predicates"
    hasExam: Boolean
    hasExamWith: [AssignmentWhereInput!]
    "student edge predicates"
    hasStudent: Boolean
    hasStudentWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    not: GradeWhereInput
    or: [GradeWhereInput!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

input GroupOrder {
    direction: OrderDirection!
    field: GroupOrderField
}

"""

GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
    "active field predicates"
    active: Boolean
    activeNEQ: Boolean
    and: [GroupWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "deleted_at field predicates"
    deletedAt: Time
    deletedAtGT: Time
    deletedAtGTE: Time
    deletedAtIn: [Time!]
    deletedAtIsNil: Boolean
    deletedAtLT: Time
    deletedAtLTE: Time
    deletedAtNEQ: Time
    deletedAtNotIn: [Time!]
    deletedAtNotNil: Boolean
    "group_type field predicates"
    groupType: GroupType
    groupTypeIn: [GroupType!]
    groupTypeNEQ: GroupType
    groupTypeNotIn: [GroupType!]
    "class edge predicates"
    hasClass: Boolean
    hasClassWith: [ClassWhereInput!]
    "messages edge predicates"
    hasMessages: Boolean
    hasMessagesWith: [MessageWhereInput!]
    "users edge predicates"
    hasUsers: Boolean
    hasUsersWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    "name field predicates"
    name: String
    nameContains: String
    nameContainsFold: String
    nameEqualFold: String
    nameGT: String
    nameGTE: String
    nameHasPrefix: String
    nameHasSuffix: String
    nameIn: [String!]
    nameIsNil: Boolean
    nameLT: String
    nameLTE: String
    nameNEQ: String
    nameNotIn: [String!]
    nameNotNil: Boolean
    not: GroupWhereInput
    or: [GroupWhereInput!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

input LoginInput {
    password: String!
    username: String!
}

input MessageOrder {
    direction: OrderDirection!
    field: MessageOrderField
}

"""

MessageWhereInput is used for filtering Message objects.
Input was generated by ent.
"""
input MessageWhereInput {
    and: [MessageWhereInput!]
    "attachment field predicates"
    attachment: String
    attachmentContains: String
    attachmentContainsFold: String
    attachmentEqualFold: String
    attachmentGT: String
    attachmentGTE: String
    attachmentHasPrefix: String
    attachmentHasSuffix: String
    attachmentIn: [String!]
    attachmentIsNil: Boolean
    attachmentLT: String
    attachmentLTE: String
    attachmentNEQ: String
    attachmentNotIn: [String!]
    attachmentNotNil: Boolean
    "content field predicates"
    content: String
    contentContains: String
    contentContainsFold: String
    contentEqualFold: String
    contentGT: String
    contentGTE: String
    contentHasPrefix: String
    contentHasSuffix: String
    contentIn: [String!]
    contentIsNil: Boolean
    contentLT: String
    contentLTE: String
    contentNEQ: String
    contentNotIn: [String!]
    contentNotNil: Boolean
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "deleted_at field predicates"
    deletedAt: Time
    deletedAtGT: Time
    deletedAtGTE: Time
    deletedAtIn: [Time!]
    deletedAtIsNil: Boolean
    deletedAtLT: Time
    deletedAtLTE: Time
    deletedAtNEQ: Time
    deletedAtNotIn: [Time!]
    deletedAtNotNil: Boolean
    "group edge predicates"
    hasGroup: Boolean
    hasGroupWith: [GroupWhereInput!]
    "owner edge predicates"
    hasOwner: Boolean
    hasOwnerWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    not: MessageWhereInput
    or: [MessageWhereInput!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

input PostMessageInput {
    attachment: Upload
    content: String!
    groupID: ID!
}

"""

ScheduleWhereInput is used for filtering Schedule objects.
Input was generated by ent.
"""
input ScheduleWhereInput {
    and: [ScheduleWhereInput!]
    "duration field predicates"
    duration: Int
    durationGT: Int
    durationGTE: Int
    durationIn: [Int!]
    durationLT: Int
    durationLTE: Int
    durationNEQ: Int
    durationNotIn: [Int!]
    "class edge predicates"
    hasClass: Boolean
    hasClassWith: [ClassWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    not: ScheduleWhereInput
    or: [ScheduleWhereInput!]
    "starts_at field predicates"
    startsAt: Time
    startsAtGT: Time
    startsAtGTE: Time
    startsAtIn: [Time!]
    startsAtLT: Time
    startsAtLTE: Time
    startsAtNEQ: Time
    startsAtNotIn: [Time!]
    "weekday field predicates"
    weekday: Int
    weekdayGT: Int
    weekdayGTE: Int
    weekdayIn: [Int!]
    weekdayLT: Int
    weekdayLTE: Int
    weekdayNEQ: Int
    weekdayNotIn: [Int!]
}

input SchoolOrder {
    direction: OrderDirection!
    field: SchoolOrderField
}

"""

SchoolWhereInput is used for filtering School objects.
Input was generated by ent.
"""
input SchoolWhereInput {
    "active field predicates"
    active: Boolean
    activeNEQ: Boolean
    and: [SchoolWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "deleted_at field predicates"
    deletedAt: Time
    deletedAtGT: Time
    deletedAtGTE: Time
    deletedAtIn: [Time!]
    deletedAtIsNil: Boolean
    deletedAtLT: Time
    deletedAtLTE: Time
    deletedAtNEQ: Time
    deletedAtNotIn: [Time!]
    deletedAtNotNil: Boolean
    "directory field predicates"
    directory: String
    directoryContains: String
    directoryContainsFold: String
    directoryEqualFold: String
    directoryGT: String
    directoryGTE: String
    directoryHasPrefix: String
    directoryHasSuffix: String
    directoryIn: [String!]
    directoryLT: String
    directoryLTE: String
    directoryNEQ: String
    directoryNotIn: [String!]
    "stages edge predicates"
    hasStages: Boolean
    hasStagesWith: [StageWhereInput!]
    "users edge predicates"
    hasUsers: Boolean
    hasUsersWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    "image field predicates"
    image: String
    imageContains: String
    imageContainsFold: String
    imageEqualFold: String
    imageGT: String
    imageGTE: String
    imageHasPrefix: String
    imageHasSuffix: String
    imageIn: [String!]
    imageLT: String
    imageLTE: String
    imageNEQ: String
    imageNotIn: [String!]
    "name field predicates"
    name: String
    nameContains: String
    nameContainsFold: String
    nameEqualFold: String
    nameGT: String
    nameGTE: String
    nameHasPrefix: String
    nameHasSuffix: String
    nameIn: [String!]
    nameLT: String
    nameLTE: String
    nameNEQ: String
    nameNotIn: [String!]
    not: SchoolWhereInput
    or: [SchoolWhereInput!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

input StageOrder {
    direction: OrderDirection!
    field: StageOrderField
}

"""

StageWhereInput is used for filtering Stage objects.
Input was generated by ent.
"""
input StageWhereInput {
    "active field predicates"
    active: Boolean
    activeNEQ: Boolean
    and: [StageWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "deleted_at field predicates"
    deletedAt: Time
    deletedAtGT: Time
    deletedAtGTE: Time
    deletedAtIn: [Time!]
    deletedAtIsNil: Boolean
    deletedAtLT: Time
    deletedAtLTE: Time
    deletedAtNEQ: Time
    deletedAtNotIn: [Time!]
    deletedAtNotNil: Boolean
    "directory field predicates"
    directory: String
    directoryContains: String
    directoryContainsFold: String
    directoryEqualFold: String
    directoryGT: String
    directoryGTE: String
    directoryHasPrefix: String
    directoryHasSuffix: String
    directoryIn: [String!]
    directoryLT: String
    directoryLTE: String
    directoryNEQ: String
    directoryNotIn: [String!]
    "classes edge predicates"
    hasClasses: Boolean
    hasClassesWith: [ClassWhereInput!]
    "payments edge predicates"
    hasPayments: Boolean
    hasPaymentsWith: [TuitionPaymentWhereInput!]
    "school edge predicates"
    hasSchool: Boolean
    hasSchoolWith: [SchoolWhereInput!]
    "students edge predicates"
    hasStudents: Boolean
    hasStudentsWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    "name field predicates"
    name: String
    nameContains: String
    nameContainsFold: String
    nameEqualFold: String
    nameGT: String
    nameGTE: String
    nameHasPrefix: String
    nameHasSuffix: String
    nameIn: [String!]
    nameLT: String
    nameLTE: String
    nameNEQ: String
    nameNotIn: [String!]
    not: StageWhereInput
    or: [StageWhereInput!]
    "tuition_amount field predicates"
    tuitionAmount: Int
    tuitionAmountGT: Int
    tuitionAmountGTE: Int
    tuitionAmountIn: [Int!]
    tuitionAmountLT: Int
    tuitionAmountLTE: Int
    tuitionAmountNEQ: Int
    tuitionAmountNotIn: [Int!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

"""

TuitionPaymentWhereInput is used for filtering TuitionPayment objects.
Input was generated by ent.
"""
input TuitionPaymentWhereInput {
    and: [TuitionPaymentWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "stage edge predicates"
    hasStage: Boolean
    hasStageWith: [StageWhereInput!]
    "student edge predicates"
    hasStudent: Boolean
    hasStudentWith: [UserWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    not: TuitionPaymentWhereInput
    or: [TuitionPaymentWhereInput!]
    "paid_amount field predicates"
    paidAmount: Int
    paidAmountGT: Int
    paidAmountGTE: Int
    paidAmountIn: [Int!]
    paidAmountLT: Int
    paidAmountLTE: Int
    paidAmountNEQ: Int
    paidAmountNotIn: [Int!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
}

input UpdateAssignmentInput {
    description: String
    dueDate: Time
    duration: Duration
    file: Upload
    name: String
}

input UpdateClassInput {
    active: Boolean
    name: String
    teacherID: ID
}

input UpdateGroupInput {
    active: Boolean
    name: String
}

input UpdateSchoolInput {
    active: Boolean
    image: Upload
    name: String
}

input UpdateStageInput {
    active: Boolean
    name: String
    tuitionAmount: Int
}

input UpdateUserInput {
    active: Boolean
    image: Upload
    name: String
    password: String
    phone: String
    stageID: ID
    username: String
}

input UserOrder {
    direction: OrderDirection!
    field: UserOrderField
}

"""

UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
    "active field predicates"
    active: Boolean
    activeNEQ: Boolean
    and: [UserWhereInput!]
    "created_at field predicates"
    createdAt: Time
    createdAtGT: Time
    createdAtGTE: Time
    createdAtIn: [Time!]
    createdAtLT: Time
    createdAtLTE: Time
    createdAtNEQ: Time
    createdAtNotIn: [Time!]
    "deleted_at field predicates"
    deletedAt: Time
    deletedAtGT: Time
    deletedAtGTE: Time
    deletedAtIn: [Time!]
    deletedAtIsNil: Boolean
    deletedAtLT: Time
    deletedAtLTE: Time
    deletedAtNEQ: Time
    deletedAtNotIn: [Time!]
    deletedAtNotNil: Boolean
    "directory field predicates"
    directory: String
    directoryContains: String
    directoryContainsFold: String
    directoryEqualFold: String
    directoryGT: String
    directoryGTE: String
    directoryHasPrefix: String
    directoryHasSuffix: String
    directoryIn: [String!]
    directoryLT: String
    directoryLTE: String
    directoryNEQ: String
    directoryNotIn: [String!]
    "attendances edge predicates"
    hasAttendances: Boolean
    hasAttendancesWith: [AttendanceWhereInput!]
    "classes edge predicates"
    hasClasses: Boolean
    hasClassesWith: [ClassWhereInput!]
    "grades edge predicates"
    hasGrades: Boolean
    hasGradesWith: [GradeWhereInput!]
    "groups edge predicates"
    hasGroups: Boolean
    hasGroupsWith: [GroupWhereInput!]
    "messages edge predicates"
    hasMessages: Boolean
    hasMessagesWith: [MessageWhereInput!]
    "payments edge predicates"
    hasPayments: Boolean
    hasPaymentsWith: [TuitionPaymentWhereInput!]
    "school edge predicates"
    hasSchool: Boolean
    hasSchoolWith: [SchoolWhereInput!]
    "stage edge predicates"
    hasStage: Boolean
    hasStageWith: [StageWhereInput!]
    "submissions edge predicates"
    hasSubmissions: Boolean
    hasSubmissionsWith: [AssignmentSubmissionWhereInput!]
    "id field predicates"
    id: ID
    idGT: ID
    idGTE: ID
    idIn: [ID!]
    idLT: ID
    idLTE: ID
    idNEQ: ID
    idNotIn: [ID!]
    "image field predicates"
    image: String
    imageContains: String
    imageContainsFold: String
    imageEqualFold: String
    imageGT: String
    imageGTE: String
    imageHasPrefix: String
    imageHasSuffix: String
    imageIn: [String!]
    imageIsNil: Boolean
    imageLT: String
    imageLTE: String
    imageNEQ: String
    imageNotIn: [String!]
    imageNotNil: Boolean
    "name field predicates"
    name: String
    nameContains: String
    nameContainsFold: String
    nameEqualFold: String
    nameGT: String
    nameGTE: String
    nameHasPrefix: String
    nameHasSuffix: String
    nameIn: [String!]
    nameLT: String
    nameLTE: String
    nameNEQ: String
    nameNotIn: [String!]
    not: UserWhereInput
    or: [UserWhereInput!]
    "phone field predicates"
    phone: String
    phoneContains: String
    phoneContainsFold: String
    phoneEqualFold: String
    phoneGT: String
    phoneGTE: String
    phoneHasPrefix: String
    phoneHasSuffix: String
    phoneIn: [String!]
    phoneLT: String
    phoneLTE: String
    phoneNEQ: String
    phoneNotIn: [String!]
    "role field predicates"
    role: Role
    roleIn: [Role!]
    roleNEQ: Role
    roleNotIn: [Role!]
    "token_version field predicates"
    tokenVersion: Int
    tokenVersionGT: Int
    tokenVersionGTE: Int
    tokenVersionIn: [Int!]
    tokenVersionLT: Int
    tokenVersionLTE: Int
    tokenVersionNEQ: Int
    tokenVersionNotIn: [Int!]
    "updated_at field predicates"
    updatedAt: Time
    updatedAtGT: Time
    updatedAtGTE: Time
    updatedAtIn: [Time!]
    updatedAtLT: Time
    updatedAtLTE: Time
    updatedAtNEQ: Time
    updatedAtNotIn: [Time!]
    "username field predicates"
    username: String
    usernameContains: String
    usernameContainsFold: String
    usernameEqualFold: String
    usernameGT: String
    usernameGTE: String
    usernameHasPrefix: String
    usernameHasSuffix: String
    usernameIn: [String!]
    usernameLT: String
    usernameLTE: String
    usernameNEQ: String
    usernameNotIn: [String!]
}


scalar Duration

scalar Upload

scalar Time

scalar Cursor
