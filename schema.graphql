directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
input AddAssignmentInput {
  name: String!
  description: String
  file: Upload
  classID: ID!
  dueDate: Time!
  isExam: Boolean! = false
  duration: Duration
}

input AddAssignmentSubmissionInput {
  assignmentID: ID!
  files: [Upload!]!
  submittedAt: Time
}

input AddAttendanceInput {
  date: Time!
  state: AttendanceState!
  classID: ID!
  studentID: ID!
}

input AddClassInput {
  name: String!
  active: Boolean! = true
  teacherID: ID!
  stageID: ID!
}

input AddCourseGradeInput {
  studentID: ID!
  stageID: ID!
  classID: ID!
  course: Course!
  activityFirst: Int
  activitySecond: Int
  writtenFirst: Int
  writtenSecond: Int
  courseFinal: Int
  year: String!
}

input AddGroupInput {
  name: String!
  active: Boolean! = true
  userID: ID!
}

input AddNotificationInput {
  title: String!
  body: String! = ""
  image: Upload
  route: String! = ""
  color: String! = ""
  stageID: ID!
}

input AddScheduleInput {
  weekday: Weekday!
  duration: Duration!
  startsAt: Time!
  classID: ID!
}

input AddSchoolInput {
  name: String!
  image: Upload!
  active: Boolean! = true
}

input AddStageInput {
  name: String!
  active: Boolean! = true
  tuitionAmount: Int!
  schoolID: ID!
}

input AddTuitionPaymentInput {
  stageID: ID!
  studentID: ID!
  year: String!
  paidAmount: Int!
}

input AddUserInput {
  name: String!
  username: String!
  password: String!
  phone: String!
  image: Upload
  role: Role! = STUDENT
  active: Boolean! = true
  schoolID: ID
  stageID: ID
}

type Assignment implements Node {
  id: ID!
  name: String!
  description: String
  dueDate: Time!
  duration: Duration
  isExam: Boolean!
  file: String
  createdAt: Time!
  updatedAt: Time!
  class: Class!
  submissions(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: AssignmentSubmissionOrder
    where: AssignmentSubmissionWhereInput
  ): AssignmentSubmissionConnection
}

type AssignmentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AssignmentEdge]
}

type AssignmentEdge {
  node: Assignment
  cursor: Cursor!
}

input AssignmentOrder {
  field: AssignmentOrderField
  direction: OrderDirection!
}

enum AssignmentOrderField {
  NAME
  DESCRIPTION
  DUE_DATE
  DURATION
  CREATED_AT
  UPDATED_AT
}

type AssignmentSubmission implements Node {
  id: ID!
  files: [String!]!
  submittedAt: Time
  createdAt: Time!
  updatedAt: Time!
  student: User!
  assignment: Assignment!
}

type AssignmentSubmissionConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AssignmentSubmissionEdge]
}

type AssignmentSubmissionEdge {
  node: AssignmentSubmission
  cursor: Cursor!
}

input AssignmentSubmissionOrder {
  field: AssignmentSubmissionOrderField
  direction: OrderDirection!
}

enum AssignmentSubmissionOrderField {
  SUBMITTED_AT
  CREATED_AT
  UPDATED_AT
}

input AssignmentSubmissionWhereInput {
  not: AssignmentSubmissionWhereInput
  and: [AssignmentSubmissionWhereInput!]
  or: [AssignmentSubmissionWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  submittedAt: Time
  submittedAtNEQ: Time
  submittedAtIn: [Time!]
  submittedAtNotIn: [Time!]
  submittedAtGT: Time
  submittedAtGTE: Time
  submittedAtLT: Time
  submittedAtLTE: Time
  submittedAtIsNil: Boolean
  submittedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasStudent: Boolean
  hasStudentWith: [UserWhereInput!]
  hasAssignment: Boolean
  hasAssignmentWith: [AssignmentWhereInput!]
}

input AssignmentWhereInput {
  not: AssignmentWhereInput
  and: [AssignmentWhereInput!]
  or: [AssignmentWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  file: String
  fileNEQ: String
  fileIn: [String!]
  fileNotIn: [String!]
  fileGT: String
  fileGTE: String
  fileLT: String
  fileLTE: String
  fileContains: String
  fileHasPrefix: String
  fileHasSuffix: String
  fileIsNil: Boolean
  fileNotNil: Boolean
  fileEqualFold: String
  fileContainsFold: String
  isExam: Boolean
  isExamNEQ: Boolean
  dueDate: Time
  dueDateNEQ: Time
  dueDateIn: [Time!]
  dueDateNotIn: [Time!]
  dueDateGT: Time
  dueDateGTE: Time
  dueDateLT: Time
  dueDateLTE: Time
  duration: Duration
  durationNEQ: Duration
  durationIn: [Duration!]
  durationNotIn: [Duration!]
  durationGT: Duration
  durationGTE: Duration
  durationLT: Duration
  durationLTE: Duration
  durationIsNil: Boolean
  durationNotNil: Boolean
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasClass: Boolean
  hasClassWith: [ClassWhereInput!]
  hasSubmissions: Boolean
  hasSubmissionsWith: [AssignmentSubmissionWhereInput!]
  hasGrades: Boolean
  hasGradesWith: [GradeWhereInput!]
}

type Attendance implements Node {
  id: ID!
  date: Time!
  state: AttendanceState!
  createdAt: Time!
  updatedAt: Time!
  class: Class!
  student: User!
}

type AttendanceConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AttendanceEdge]
}

type AttendanceEdge {
  node: Attendance
  cursor: Cursor!
}

input AttendanceOrder {
  field: AttendanceOrderField
  direction: OrderDirection!
}

enum AttendanceOrderField {
  DATE
  CREATED_AT
  UPDATED_AT
}

enum AttendanceState {
  PRESENT
  ABSENT
  EXCUSED_ABSENT
  SICK
}

input AttendanceWhereInput {
  not: AttendanceWhereInput
  and: [AttendanceWhereInput!]
  or: [AttendanceWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  date: Time
  dateNEQ: Time
  dateIn: [Time!]
  dateNotIn: [Time!]
  dateGT: Time
  dateGTE: Time
  dateLT: Time
  dateLTE: Time
  state: AttendanceState
  stateNEQ: AttendanceState
  stateIn: [AttendanceState!]
  stateNotIn: [AttendanceState!]
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasClass: Boolean
  hasClassWith: [ClassWhereInput!]
  hasStudent: Boolean
  hasStudentWith: [UserWhereInput!]
}

type AuthData {
  accessToken: String!
  refreshToken: String!
}

type Class implements Node {
  id: ID!
  name: String!
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!
  stage: Stage!
  teacher: User!
  group: Group!
  assignments(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: AssignmentOrder
    where: AssignmentWhereInput
  ): AssignmentConnection
  attendances(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: AttendanceOrder
    where: AttendanceWhereInput
  ): AttendanceConnection
  schedules(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: ScheduleOrder
    where: ScheduleWhereInput
  ): ScheduleConnection
  courseGrades(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: CourseGradeOrder
    where: CourseGradeWhereInput
  ): CourseGradeConnection
}

type ClassConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ClassEdge]
}

type ClassEdge {
  node: Class
  cursor: Cursor!
}

input ClassOrder {
  field: ClassOrderField
  direction: OrderDirection!
}

enum ClassOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

input ClassWhereInput {
  not: ClassWhereInput
  and: [ClassWhereInput!]
  or: [ClassWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  active: Boolean
  activeNEQ: Boolean
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasStage: Boolean
  hasStageWith: [StageWhereInput!]
  hasTeacher: Boolean
  hasTeacherWith: [UserWhereInput!]
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  hasAssignments: Boolean
  hasAssignmentsWith: [AssignmentWhereInput!]
  hasAttendances: Boolean
  hasAttendancesWith: [AttendanceWhereInput!]
  hasSchedules: Boolean
  hasSchedulesWith: [ScheduleWhereInput!]
  hasCourseGrades: Boolean
  hasCourseGradesWith: [CourseGradeWhereInput!]
}

enum Course {
  FIRST
  SECOND
}

type CourseGrade implements Node {
  id: ID!
  course: Course!
  activityFirst: Int
  activitySecond: Int
  writtenFirst: Int
  writtenSecond: Int
  courseFinal: Int
  year: String!
  createdAt: Time!
  updatedAt: Time!
  student: User!
  class: Class!
  stage: Stage!
}

type CourseGradeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CourseGradeEdge]
}

type CourseGradeEdge {
  node: CourseGrade
  cursor: Cursor!
}

input CourseGradeOrder {
  field: CourseGradeOrderField
  direction: OrderDirection!
}

enum CourseGradeOrderField {
  ACTIVITY_FIRST
  ACTIVITY_SECOND
  WRITTEN_FIRST
  WRITTEN_SECOND
  COURSE_FINAL
  YEAR
  CREATED_AT
  UPDATED_AT
}

input CourseGradeWhereInput {
  not: CourseGradeWhereInput
  and: [CourseGradeWhereInput!]
  or: [CourseGradeWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  course: Course
  courseNEQ: Course
  courseIn: [Course!]
  courseNotIn: [Course!]
  activityFirst: Int
  activityFirstNEQ: Int
  activityFirstIn: [Int!]
  activityFirstNotIn: [Int!]
  activityFirstGT: Int
  activityFirstGTE: Int
  activityFirstLT: Int
  activityFirstLTE: Int
  activityFirstIsNil: Boolean
  activityFirstNotNil: Boolean
  activitySecond: Int
  activitySecondNEQ: Int
  activitySecondIn: [Int!]
  activitySecondNotIn: [Int!]
  activitySecondGT: Int
  activitySecondGTE: Int
  activitySecondLT: Int
  activitySecondLTE: Int
  activitySecondIsNil: Boolean
  activitySecondNotNil: Boolean
  writtenFirst: Int
  writtenFirstNEQ: Int
  writtenFirstIn: [Int!]
  writtenFirstNotIn: [Int!]
  writtenFirstGT: Int
  writtenFirstGTE: Int
  writtenFirstLT: Int
  writtenFirstLTE: Int
  writtenFirstIsNil: Boolean
  writtenFirstNotNil: Boolean
  writtenSecond: Int
  writtenSecondNEQ: Int
  writtenSecondIn: [Int!]
  writtenSecondNotIn: [Int!]
  writtenSecondGT: Int
  writtenSecondGTE: Int
  writtenSecondLT: Int
  writtenSecondLTE: Int
  writtenSecondIsNil: Boolean
  writtenSecondNotNil: Boolean
  courseFinal: Int
  courseFinalNEQ: Int
  courseFinalIn: [Int!]
  courseFinalNotIn: [Int!]
  courseFinalGT: Int
  courseFinalGTE: Int
  courseFinalLT: Int
  courseFinalLTE: Int
  courseFinalIsNil: Boolean
  courseFinalNotNil: Boolean
  year: String
  yearNEQ: String
  yearIn: [String!]
  yearNotIn: [String!]
  yearGT: String
  yearGTE: String
  yearLT: String
  yearLTE: String
  yearContains: String
  yearHasPrefix: String
  yearHasSuffix: String
  yearEqualFold: String
  yearContainsFold: String
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasStudent: Boolean
  hasStudentWith: [UserWhereInput!]
  hasClass: Boolean
  hasClassWith: [ClassWhereInput!]
  hasStage: Boolean
  hasStageWith: [StageWhereInput!]
}

scalar Cursor

scalar Duration

input GradeWhereInput {
  not: GradeWhereInput
  and: [GradeWhereInput!]
  or: [GradeWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  examGrade: Int
  examGradeNEQ: Int
  examGradeIn: [Int!]
  examGradeNotIn: [Int!]
  examGradeGT: Int
  examGradeGTE: Int
  examGradeLT: Int
  examGradeLTE: Int
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasStudent: Boolean
  hasStudentWith: [UserWhereInput!]
  hasExam: Boolean
  hasExamWith: [AssignmentWhereInput!]
}

type Group implements Node {
  id: ID!
  name: String!
  groupType: GroupType!
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!
  class: Class
  users: [User!]
  messages(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: MessageOrder
    where: MessageWhereInput
  ): MessageConnection
}

type GroupConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GroupEdge]
}

type GroupEdge {
  node: Group
  cursor: Cursor!
}

input GroupOrder {
  field: GroupOrderField
  direction: OrderDirection!
}

enum GroupOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

enum GroupType {
  PRIVATE
  SHARED
}

input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  groupType: GroupType
  groupTypeNEQ: GroupType
  groupTypeIn: [GroupType!]
  groupTypeNotIn: [GroupType!]
  active: Boolean
  activeNEQ: Boolean
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasClass: Boolean
  hasClassWith: [ClassWhereInput!]
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
}

input LoginInput {
  username: String!
  password: String!
  pushToken: String
}

type Message implements Node {
  id: ID!
  content: String!
  attachment: String!
  createdAt: Time!
  updatedAt: Time!
  group: Group!
  owner: User!
}

type MessageConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [MessageEdge]
}

type MessageEdge {
  node: Message
  cursor: Cursor!
}

input MessageOrder {
  field: MessageOrderField
  direction: OrderDirection!
}

enum MessageOrderField {
  CREATED_AT
  UPDATED_AT
}

input MessageWhereInput {
  not: MessageWhereInput
  and: [MessageWhereInput!]
  or: [MessageWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  attachment: String
  attachmentNEQ: String
  attachmentIn: [String!]
  attachmentNotIn: [String!]
  attachmentGT: String
  attachmentGTE: String
  attachmentLT: String
  attachmentLTE: String
  attachmentContains: String
  attachmentHasPrefix: String
  attachmentHasSuffix: String
  attachmentIsNil: Boolean
  attachmentNotNil: Boolean
  attachmentEqualFold: String
  attachmentContainsFold: String
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}

type Mutation {
  addSchool(input: AddSchoolInput!): School!
  updateSchool(id: ID!, input: UpdateSchoolInput!): School!
  deleteSchool(id: ID!): Boolean!
  deleteSchoolPermanently(id: ID!): Boolean!
  addUser(input: AddUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  deleteUserPermanently(id: ID!): Boolean!
  addStage(input: AddStageInput!): Stage!
  updateStage(id: ID!, input: UpdateStageInput!): Stage!
  deleteStage(id: ID!): Boolean!
  deleteStagePermanently(id: ID!): Boolean!
  loginAdmin(input: LoginInput!): AuthData!
  loginUser(input: LoginInput!): AuthData!
  refreshTokens(token: String!): AuthData!
  postMessage(input: PostMessageInput!): Message!
  addGroup(input: AddGroupInput!): Group!
  updateGroup(id: ID!, input: UpdateGroupInput!): Group!
  deleteGroup(id: ID!): Boolean!
  addClass(input: AddClassInput!): Class!
  updateClass(id: ID!, input: UpdateClassInput!): Class!
  deleteClass(id: ID!): Boolean!
  addAssignment(input: AddAssignmentInput!): Assignment!
  updateAssignment(id: ID!, input: UpdateAssignmentInput!): Assignment!
  deleteAssignment(id: ID!): Boolean!
  addAssignmentSubmission(
    input: AddAssignmentSubmissionInput!
  ): AssignmentSubmission!
  updateAssignmentSubmission(
    id: ID!
    input: UpdateAssignmentSubmissionInput!
  ): AssignmentSubmission!
  deleteAssignmentSubmissionFile(id: ID!, index: Int!): AssignmentSubmission!
  deleteAssignmentSubmission(id: ID!): Boolean!
  addSchedule(input: AddScheduleInput!): Schedule!
  updateSchedule(id: ID!, input: UpdateScheduleInput!): Schedule!
  deleteSchedule(id: ID!): Boolean!
  addCourseGrade(input: AddCourseGradeInput!): CourseGrade!
  updateCourseGrade(id: ID!, input: UpdateCourseGradeInput!): CourseGrade!
  deleteCourseGrade(id: ID!): Boolean!
  addTuitionPayment(input: AddTuitionPaymentInput!): TuitionPayment!
  updateTuitionPayment(
    id: ID!
    input: UpdateTuitionPaymentInput!
  ): TuitionPayment!
  deleteTuitionPayment(id: ID!): Boolean!
  addAttendance(input: AddAttendanceInput!): Attendance!
  updateAttendance(id: ID!, input: UpdateAttendanceInput!): Attendance!
  deleteAttendance(id: ID!): Boolean!
  addNotification(input: AddNotificationInput!): Notification!
  deleteNotification(id: ID!): Boolean!
}

interface Node {
  id: ID!
}

type Notification implements Node {
  id: ID!
  title: String!
  body: String!
  image: String!
  route: String!
  color: String!
  createdAt: Time!
  updatedAt: Time!
  stage: Stage!
}

type NotificationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [NotificationEdge]
}

type NotificationEdge {
  node: Notification
  cursor: Cursor!
}

input NotificationOrder {
  field: NotificationOrderField
  direction: OrderDirection!
}

enum NotificationOrderField {
  TITLE
  BODY
  CREATED_AT
  UPDATED_AT
}

input NotificationWhereInput {
  not: NotificationWhereInput
  and: [NotificationWhereInput!]
  or: [NotificationWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  body: String
  bodyNEQ: String
  bodyIn: [String!]
  bodyNotIn: [String!]
  bodyGT: String
  bodyGTE: String
  bodyLT: String
  bodyLTE: String
  bodyContains: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyIsNil: Boolean
  bodyNotNil: Boolean
  bodyEqualFold: String
  bodyContainsFold: String
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String
  route: String
  routeNEQ: String
  routeIn: [String!]
  routeNotIn: [String!]
  routeGT: String
  routeGTE: String
  routeLT: String
  routeLTE: String
  routeContains: String
  routeHasPrefix: String
  routeHasSuffix: String
  routeIsNil: Boolean
  routeNotNil: Boolean
  routeEqualFold: String
  routeContainsFold: String
  color: String
  colorNEQ: String
  colorIn: [String!]
  colorNotIn: [String!]
  colorGT: String
  colorGTE: String
  colorLT: String
  colorLTE: String
  colorContains: String
  colorHasPrefix: String
  colorHasSuffix: String
  colorIsNil: Boolean
  colorNotNil: Boolean
  colorEqualFold: String
  colorContainsFold: String
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasStage: Boolean
  hasStageWith: [StageWhereInput!]
}

enum OrderDirection {
  ASC
  DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

input PostMessageInput {
  groupID: ID!
  content: String!
  attachment: Upload
}

type Query {
  me: User!
  school(id: ID!): School!
  schools(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: SchoolOrder
    where: SchoolWhereInput
  ): SchoolConnection!
  user(id: ID!): User!
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection!
  stage(id: ID!): Stage!
  stages(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: StageOrder
    where: StageWhereInput
  ): StageConnection!
  messages(
    groupID: ID!
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: MessageOrder
    where: MessageWhereInput
  ): MessageConnection!
  group(id: ID!): Group!
  groups(
    userID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GroupOrder
    where: GroupWhereInput
  ): GroupConnection!
  class(id: ID!): Class!
  classes(
    userID: ID
    stageID: ID
    schoolID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: ClassOrder
    where: ClassWhereInput
  ): ClassConnection!
  assignment(id: ID!): Assignment!
  assignments(
    userID: ID
    stageID: ID
    schoolID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: AssignmentOrder
    where: AssignmentWhereInput
  ): AssignmentConnection!
  assignmentSubmissions(
    assignmentID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: AssignmentSubmissionOrder
    where: AssignmentSubmissionWhereInput
  ): AssignmentSubmissionConnection!
  schedule(stageID: ID, weekday: Weekday): [Schedule!]!
  courseGrades(
    studentID: ID
    stageID: ID
    classID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: CourseGradeOrder
    where: CourseGradeWhereInput
  ): CourseGradeConnection!
  tuitionPayments(
    studentID: ID
    stageID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: TuitionPaymentOrder
    where: TuitionPaymentWhereInput
  ): TuitionPaymentConnection!
  attendances(
    studentID: ID
    classID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: AttendanceOrder
    where: AttendanceWhereInput
  ): AttendanceConnection!
  notifications(
    stageID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: NotificationOrder
    where: NotificationWhereInput
  ): NotificationConnection!
}

enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
}

type Schedule implements Node {
  id: ID!
  weekday: Weekday!
  duration: Duration!
  startsAt: Time!
  class: Class!
}

type ScheduleConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ScheduleEdge]
}

type ScheduleEdge {
  node: Schedule
  cursor: Cursor!
}

input ScheduleOrder {
  field: ScheduleOrderField
  direction: OrderDirection!
}

enum ScheduleOrderField {
  WEEKDAY
  STARTS_AT
  DURATION
  CREATED_AT
  UPDATED_AT
}

input ScheduleWhereInput {
  not: ScheduleWhereInput
  and: [ScheduleWhereInput!]
  or: [ScheduleWhereInput!]
  weekday: Weekday
  weekdayNEQ: Weekday
  weekdayIn: [Weekday!]
  weekdayNotIn: [Weekday!]
  weekdayGT: Weekday
  weekdayGTE: Weekday
  weekdayLT: Weekday
  weekdayLTE: Weekday
  startsAt: Time
  startsAtNEQ: Time
  startsAtIn: [Time!]
  startsAtNotIn: [Time!]
  startsAtGT: Time
  startsAtGTE: Time
  startsAtLT: Time
  startsAtLTE: Time
  duration: Duration
  durationNEQ: Duration
  durationIn: [Duration!]
  durationNotIn: [Duration!]
  durationGT: Duration
  durationGTE: Duration
  durationLT: Duration
  durationLTE: Duration
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasClass: Boolean
  hasClassWith: [ClassWhereInput!]
}

type School implements Node {
  id: ID!
  active: Boolean!
  name: String!
  image: String
  createdAt: Time!
  updatedAt: Time!
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection
  stages(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: StageOrder
    where: StageWhereInput
  ): StageConnection
}

type SchoolConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [SchoolEdge]
}

type SchoolEdge {
  node: School
  cursor: Cursor!
}

input SchoolOrder {
  field: SchoolOrderField
  direction: OrderDirection!
}

enum SchoolOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

input SchoolWhereInput {
  not: SchoolWhereInput
  and: [SchoolWhereInput!]
  or: [SchoolWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageEqualFold: String
  imageContainsFold: String
  directory: String
  directoryNEQ: String
  directoryIn: [String!]
  directoryNotIn: [String!]
  directoryGT: String
  directoryGTE: String
  directoryLT: String
  directoryLTE: String
  directoryContains: String
  directoryHasPrefix: String
  directoryHasSuffix: String
  directoryEqualFold: String
  directoryContainsFold: String
  active: Boolean
  activeNEQ: Boolean
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  hasStages: Boolean
  hasStagesWith: [StageWhereInput!]
}

type Stage implements Node {
  id: ID!
  name: String!
  tuitionAmount: Int!
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!
  school: School!
  classes(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: ClassOrder
    where: ClassWhereInput
  ): ClassConnection
  payments(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: TuitionPaymentOrder
    where: TuitionPaymentWhereInput
  ): TuitionPaymentConnection
  students(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection
  courseGrades: [CourseGrade!]
}

type StageConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [StageEdge]
}

type StageEdge {
  node: Stage
  cursor: Cursor!
}

input StageOrder {
  field: StageOrderField
  direction: OrderDirection!
}

enum StageOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

input StageWhereInput {
  not: StageWhereInput
  and: [StageWhereInput!]
  or: [StageWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  tuitionAmount: Int
  tuitionAmountNEQ: Int
  tuitionAmountIn: [Int!]
  tuitionAmountNotIn: [Int!]
  tuitionAmountGT: Int
  tuitionAmountGTE: Int
  tuitionAmountLT: Int
  tuitionAmountLTE: Int
  directory: String
  directoryNEQ: String
  directoryIn: [String!]
  directoryNotIn: [String!]
  directoryGT: String
  directoryGTE: String
  directoryLT: String
  directoryLTE: String
  directoryContains: String
  directoryHasPrefix: String
  directoryHasSuffix: String
  directoryEqualFold: String
  directoryContainsFold: String
  active: Boolean
  activeNEQ: Boolean
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasSchool: Boolean
  hasSchoolWith: [SchoolWhereInput!]
  hasClasses: Boolean
  hasClassesWith: [ClassWhereInput!]
  hasPayments: Boolean
  hasPaymentsWith: [TuitionPaymentWhereInput!]
  hasStudents: Boolean
  hasStudentsWith: [UserWhereInput!]
  hasCourseGrades: Boolean
  hasCourseGradesWith: [CourseGradeWhereInput!]
  hasNotifications: Boolean
  hasNotificationsWith: [NotificationWhereInput!]
}

type Subscription {
  messagePosted(groupID: ID!): Message!
}

scalar Time

type TuitionPayment implements Node {
  id: ID!
  year: String!
  paidAmount: Int!
  createdAt: Time!
  updatedAt: Time!
  student: User!
  stage: Stage!
}

type TuitionPaymentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TuitionPaymentEdge]
}

type TuitionPaymentEdge {
  node: TuitionPayment
  cursor: Cursor!
}

input TuitionPaymentOrder {
  field: TuitionPaymentOrderField
  direction: OrderDirection!
}

enum TuitionPaymentOrderField {
  PAID_AMOUNT
  YEAR
  CREATED_AT
  UPDATED_AT
}

input TuitionPaymentWhereInput {
  not: TuitionPaymentWhereInput
  and: [TuitionPaymentWhereInput!]
  or: [TuitionPaymentWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  year: String
  yearNEQ: String
  yearIn: [String!]
  yearNotIn: [String!]
  yearGT: String
  yearGTE: String
  yearLT: String
  yearLTE: String
  yearContains: String
  yearHasPrefix: String
  yearHasSuffix: String
  yearEqualFold: String
  yearContainsFold: String
  paidAmount: Int
  paidAmountNEQ: Int
  paidAmountIn: [Int!]
  paidAmountNotIn: [Int!]
  paidAmountGT: Int
  paidAmountGTE: Int
  paidAmountLT: Int
  paidAmountLTE: Int
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasStudent: Boolean
  hasStudentWith: [UserWhereInput!]
  hasStage: Boolean
  hasStageWith: [StageWhereInput!]
}

input UpdateAssignmentInput {
  name: String
  description: String
  file: Upload
  dueDate: Time
  duration: Duration
}

input UpdateAssignmentSubmissionInput {
  files: [Upload!]!
  submittedAt: Time
}

input UpdateAttendanceInput {
  date: Time
  state: AttendanceState
}

input UpdateClassInput {
  name: String
  active: Boolean
  teacherID: ID
}

input UpdateCourseGradeInput {
  activityFirst: Int
  activitySecond: Int
  writtenFirst: Int
  writtenSecond: Int
  courseFinal: Int
}

input UpdateGroupInput {
  name: String
  active: Boolean
}

input UpdateScheduleInput {
  weekday: Weekday
  duration: Duration
  startsAt: Time
}

input UpdateSchoolInput {
  name: String
  image: Upload
  active: Boolean
}

input UpdateStageInput {
  name: String
  active: Boolean
  tuitionAmount: Int
}

input UpdateTuitionPaymentInput {
  year: String
  paidAmount: Int
}

input UpdateUserInput {
  name: String
  username: String
  password: String
  phone: String
  image: Upload
  active: Boolean
  stageID: ID
}

scalar Upload

type User implements Node {
  id: ID!
  name: String!
  username: String!
  phone: String!
  image: String!
  role: Role!
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!
  stage: Stage
  school: School
  messages(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: MessageOrder
    where: MessageWhereInput
  ): MessageConnection
  groups(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: GroupOrder
    where: GroupWhereInput
  ): GroupConnection
  classes(
    stageID: ID
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: ClassOrder
    where: ClassWhereInput
  ): ClassConnection
  assignmentSubmissions(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: AssignmentSubmissionOrder
    where: AssignmentSubmissionWhereInput
  ): AssignmentSubmissionConnection
  payments(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: TuitionPaymentOrder
    where: TuitionPaymentWhereInput
  ): TuitionPaymentConnection
  courseGrades: [CourseGrade!]!
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

input UserOrder {
  field: UserOrderField
  direction: OrderDirection!
}

enum UserOrderField {
  NAME
  USERNAME
  PHONE
  ROLE
  CREATED_AT
  UPDATED_AT
}

input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneEqualFold: String
  phoneContainsFold: String
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String
  directory: String
  directoryNEQ: String
  directoryIn: [String!]
  directoryNotIn: [String!]
  directoryGT: String
  directoryGTE: String
  directoryLT: String
  directoryLTE: String
  directoryContains: String
  directoryHasPrefix: String
  directoryHasSuffix: String
  directoryEqualFold: String
  directoryContainsFold: String
  tokenVersion: Int
  tokenVersionNEQ: Int
  tokenVersionIn: [Int!]
  tokenVersionNotIn: [Int!]
  tokenVersionGT: Int
  tokenVersionGTE: Int
  tokenVersionLT: Int
  tokenVersionLTE: Int
  role: Role
  roleNEQ: Role
  roleIn: [Role!]
  roleNotIn: [Role!]
  active: Boolean
  activeNEQ: Boolean
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  hasStage: Boolean
  hasStageWith: [StageWhereInput!]
  hasSchool: Boolean
  hasSchoolWith: [SchoolWhereInput!]
  hasClasses: Boolean
  hasClassesWith: [ClassWhereInput!]
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
  hasSubmissions: Boolean
  hasSubmissionsWith: [AssignmentSubmissionWhereInput!]
  hasAttendances: Boolean
  hasAttendancesWith: [AttendanceWhereInput!]
  hasPayments: Boolean
  hasPaymentsWith: [TuitionPaymentWhereInput!]
  hasGrades: Boolean
  hasGradesWith: [GradeWhereInput!]
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  hasCourseGrades: Boolean
  hasCourseGradesWith: [CourseGradeWhereInput!]
}

scalar Weekday

